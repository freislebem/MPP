// <auto-generated />
using System;
using DiarioDePesca.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DiarioDePesca.Migrations
{
    [DbContext(typeof(EspecieContext))]
    [Migration("20190814015051_Teste")]
    partial class Teste
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.0-rtm-35687")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("DiarioDePesca.Models.Anzol", b =>
                {
                    b.Property<int>("AnzolId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Descricao");

                    b.HasKey("AnzolId");

                    b.ToTable("Anzol");
                });

            modelBuilder.Entity("DiarioDePesca.Models.CondicaoDia", b =>
                {
                    b.Property<int>("CondicaoId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Descricao")
                        .IsRequired();

                    b.HasKey("CondicaoId");

                    b.ToTable("CondicaoDia");
                });

            modelBuilder.Entity("DiarioDePesca.Models.CorAgua", b =>
                {
                    b.Property<int>("CorAguaId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Descricao")
                        .IsRequired();

                    b.HasKey("CorAguaId");

                    b.ToTable("CorAgua");
                });

            modelBuilder.Entity("DiarioDePesca.Models.Diario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Cidade");

                    b.Property<int>("CondicaoId");

                    b.Property<int>("CorAguaId");

                    b.Property<DateTime>("DtaPescaria");

                    b.Property<DateTime>("DtaRegistro");

                    b.Property<DateTime>("HorMareCheia");

                    b.Property<DateTime>("HorMareVazia");

                    b.Property<string>("Local");

                    b.Property<double>("MareCheia");

                    b.Property<double>("MareVazia");

                    b.Property<string>("Obs");

                    b.Property<string>("Praia");

                    b.Property<double>("Pressao");

                    b.Property<double>("Temperatura");

                    b.Property<string>("Uf");

                    b.Property<int>("UsuarioId");

                    b.HasKey("Id");

                    b.HasIndex("CondicaoId")
                        .IsUnique();

                    b.HasIndex("CorAguaId")
                        .IsUnique();

                    b.HasIndex("UsuarioId");

                    b.ToTable("Diario");
                });

            modelBuilder.Entity("DiarioDePesca.Models.Especie", b =>
                {
                    b.Property<int>("EspecieId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Nome")
                        .IsRequired();

                    b.Property<string>("NomeB");

                    b.Property<string>("NomeCientifico");

                    b.HasKey("EspecieId");

                    b.ToTable("Especie");
                });

            modelBuilder.Entity("DiarioDePesca.Models.Isca", b =>
                {
                    b.Property<int>("IscaId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Descricao");

                    b.HasKey("IscaId");

                    b.ToTable("Isca");
                });

            modelBuilder.Entity("DiarioDePesca.Models.Item", b =>
                {
                    b.Property<int>("ItemId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AnzolId");

                    b.Property<int?>("DiarioId");

                    b.Property<DateTime>("DtaPescaria");

                    b.Property<int>("EspecieId");

                    b.Property<int>("IscaId");

                    b.Property<double>("Pernada");

                    b.Property<double>("PesoMaiorPeixe");

                    b.Property<int>("Qtde");

                    b.Property<double>("TamanhoMaiorPeixe");

                    b.HasKey("ItemId");

                    b.HasIndex("AnzolId")
                        .IsUnique();

                    b.HasIndex("DiarioId");

                    b.HasIndex("EspecieId")
                        .IsUnique();

                    b.HasIndex("IscaId")
                        .IsUnique();

                    b.ToTable("Item");
                });

            modelBuilder.Entity("DiarioDePesca.Models.Usuario", b =>
                {
                    b.Property<int>("UsuarioId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("celular");

                    b.Property<string>("email")
                        .IsRequired();

                    b.Property<string>("login")
                        .IsRequired();

                    b.HasKey("UsuarioId");

                    b.ToTable("Usuario");
                });

            modelBuilder.Entity("DiarioDePesca.Models.Diario", b =>
                {
                    b.HasOne("DiarioDePesca.Models.CondicaoDia", "CondicaoDias")
                        .WithOne("Diario")
                        .HasForeignKey("DiarioDePesca.Models.Diario", "CondicaoId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DiarioDePesca.Models.CorAgua", "CorAguas")
                        .WithOne("Diario")
                        .HasForeignKey("DiarioDePesca.Models.Diario", "CorAguaId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DiarioDePesca.Models.Usuario", "Usuario")
                        .WithMany("Diarios")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DiarioDePesca.Models.Item", b =>
                {
                    b.HasOne("DiarioDePesca.Models.Anzol", "Anzol")
                        .WithOne("Item")
                        .HasForeignKey("DiarioDePesca.Models.Item", "AnzolId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DiarioDePesca.Models.Diario", "Diario")
                        .WithMany("Items")
                        .HasForeignKey("DiarioId");

                    b.HasOne("DiarioDePesca.Models.Especie", "Especie")
                        .WithOne("Item")
                        .HasForeignKey("DiarioDePesca.Models.Item", "EspecieId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DiarioDePesca.Models.Isca", "Isca")
                        .WithOne("Item")
                        .HasForeignKey("DiarioDePesca.Models.Item", "IscaId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
